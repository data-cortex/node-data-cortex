declare class DataCortex {
    apiBaseUrl: string;
    isReady: boolean;
    isSending: boolean;
    timeout: NodeJS.Timeout | false;
    apiKey: string | false;
    orgName: string | false;
    appVer: string;
    serverVer: string;
    userTag: boolean;
    eventList: any[];
    nextIndex: number;
    delayCount: number;
    defaultBundle: any;
    logList: any[];
    logTimeout: NodeJS.Timeout | false;
    isLogSending: boolean;
    logDelayCount: number;
    defaultLogBundle: any;
    hasHupHandler: boolean;
    constructor();
    init(opts: any, done: () => void): void;
    setDeviceTag(tag: string): void;
    setUserTag(tag: string): void;
    install(props: any): void;
    dau(props: any): void;
    event(props: any): void;
    messageSend(props: any): void;
    messageClick(props: any): void;
    economy(props: any): void;
    flush(): void;
    _internalEventAdd(input_props: any, type: string): void;
    _sendEventsLater(delay?: number): void;
    _sendEvents(): void;
    _removeEvents(event_list: any[]): void;
    log(...args: any[]): void;
    logEvent(props: any): any;
    _removeLogs(events: any[]): void;
    _sendLogsLater(delay?: number): void;
    _sendLogs(): void;
}
declare function create(): DataCortex;
export { DataCortex, create };
